{"version":3,"sources":["logo.png","components/LaunchItem.js","components/Missionkey.js","components/launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","Missionkey","LAUNCHES_QUERY","gql","launches","query","loading","error","data","console","log","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Launches","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d78bdb02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span> </h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment> </p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch details</Link>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Missionkey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    )\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem'\nimport Missionkey from './Missionkey';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport class launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <Missionkey />\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) console.log(error);\n                            \n\n                            return <Fragment>\n                                {\n                                    data.launches.map(launch=> (\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\n                                    ))\n                                }\n                            </Fragment>\n\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default launches\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local,\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    \n                    {({ loading, error, data }) => {\n                        if(loading) return <h4>Loading...</h4>\n                        if(error) console.log(error);\n\n                        const { \n                            mission_name, \n                            flight_number, \n                            launch_year, \n                            launch_success, \n                            rocket:{ rocket_id, rocket_name, rocket_type }\n                        } = data.launch;\n                        \n\n                        return (\n                        <div>\n                            <h1 className=\"display-4 my-3\">\n                                <span className=\"text-dark\">Mission:</span> {mission_name}\n                            </h1>\n                            <h4 className=\"mb-3\">Launch Details</h4>\n                            <ul className=\"list-group\">\n                                <li className=\"list-group-item\">\n                                    Flight Number: {flight_number}\n                                </li>\n                                <li className=\"list-group-item\">\n                                    Launch Year: {launch_year}\n                                </li>\n                                <li className=\"list-group-item\">\n                                    Launch Successful: <span className={classNames({\n                                        'text-success': launch_success,\n                                        'text-danger': !launch_success\n                                    })}>{launch_success ? 'Yes' : 'No'}</span>\n                                </li>\n                            </ul>\n\n                            <h4 className=\"my-3\">Rocket Details</h4>\n                            <ul className=\"list-group mb-3\">\n                                <li className=\"list-group-item\">\n                                    Rocket ID: {rocket_id}\n                                </li>\n                                <li className=\"list-group-item\">\n                                    Rocket Name: {rocket_name}\n                                </li>\n                                <li className=\"list-group-item\">\n                                    Rocket Type: {rocket_type}\n                                </li>\n                            </ul>\n                            <hr />\n                            <Link to={'/'} className=\"btn btn-secondary\">Back to Launches</Link>\n                        </div>\n                        )}\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto'}} \n            />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}